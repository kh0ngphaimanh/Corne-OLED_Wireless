/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    tapping-term-ms = <230>;
    flavor = "balanced";
    require-prior-idle-ms = <115>;
};

/ {
    combos {
        compatible = "zmk,combos";

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <31 32>;
        };

        backspaceWord {
            bindings = <&kp LC(BACKSPACE)>;
            key-positions = <7 8 9>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <32 33>;
        };

        mouse {
            bindings = <&mo 4>;
            key-positions = <4>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&gresc       &kp Q           &kp W           &kp F             &kp P        &kp B        &kp J        &kp L          &kp U              &kp Y            &kp SQT          &caps_word
&key_repeat  &mt LEFT_GUI A  &mt LEFT_ALT R  &mt LEFT_SHIFT S  &mt LCTRL T  &kp G        &kp M        &mt RCTRL N    &mt RIGHT_SHIFT E  &mt RIGHT_ALT I  &mt RIGHT_GUI O  &key_repeat
&mo 5        &kp Z           &kp X           &kp C             &kp D        &kp V        &kp K        &kp H          &kp COMMA          &kp DOT          &kp SLASH        &mo 6
                                             &kp ESCAPE        &kp SPACE    &lt 1 TAB    &lt 2 ENTER  &kp BACKSPACE  &kp DEL
            >;

            label = "base";
        };

        nav {
            bindings = <
&trans  &none          &none      &none           &none      &none     &kp LC(LS(Z))   &kp LC(LS(V))  &kp LC(C)     &kp LC(X)  &kp LC(Z)  &trans
&trans  &kp LGUI       &kp LALT   &kp LEFT_SHIFT  &kp LCTRL  &none     &kp LEFT_ARROW  &kp DOWN       &kp UP_ARROW  &kp RIGHT  &kp ENTER  &trans
&trans  &kp LA(LS(A))  &kp LA(I)  &kp LA(O)       &kp LC(L)  &none     &kp HOME        &kp PG_DN      &kp PG_UP     &kp END    &kp INS    &trans
                                  &none           &trans     &trans    &trans          &trans         &kp DEL
            >;

            label = "nav";
        };

        symbols {
            bindings = <
&trans  &kp NON_US_BACKSLASH  &kp GRAVE     &kp LESS_THAN  &kp GREATER_THAN  &kp PIPE         &kp CARET    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DOLLAR      &key_repeat        &trans
&trans  &kp EXCLAMATION       &kp ASTERISK  &kp FSLH       &kp MINUS         &kp AMPERSAND    &kp HASH     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp DOUBLE_QUOTES  &trans
&trans  &kp TILDE             &kp PLUS      &kp LBKT       &kp RBKT          &kp PERCENT      &kp AT_SIGN  &kp COLON             &kp COMMA              &kp DOT         &kp SQT            &trans
                                            &kp QUESTION   &trans            &trans           &trans       &trans                &none
            >;

            label = "syms";
        };

        numbers {
            bindings = <
&trans  &none   &kp N7  &kp N8  &kp N9  &kp COMMA     &none   &kp PLUS   &kp ASTERISK    &none        &none     &trans
&trans  &kp N0  &kp N4  &kp N5  &kp N6  &kp EQUAL     &none   &kp LCTRL  &kp LEFT_SHIFT  &kp LALT     &kp LGUI  &trans
&trans  &none   &kp N1  &kp N2  &kp N3  &kp PERIOD    &none   &kp MINUS  &kp SLASH       &kp PERCENT  &none     &trans
                        &none   &trans  &trans        &trans  &trans     &none
            >;

            label = "nums";
        };

        mouse {
            label = "mouse";
            bindings = <
&trans  &none  &none  &none  &none   &none     &none      &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &none  &trans
&trans  &none  &none  &none  &none   &none     &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none  &trans
&trans  &none  &none  &none  &none   &none     &none      &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &none  &trans
                      &none  &trans  &trans    &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;
        };

        media {
            bindings = <
&trans  &none     &none     &none           &none      &none    &none              &none             &none              &none            &none         &trans
&trans  &kp LGUI  &kp LALT  &kp LEFT_SHIFT  &kp LCTRL  &none    &ext_power EP_TOG  &kp K_PREV        &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &kp K_NEXT    &trans
&trans  &none     &none     &none           &none      &none    &out OUT_TOG       &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &trans
                            &none           &none      &none    &kp K_STOP         &kp K_PLAY_PAUSE  &kp K_MUTE
            >;

            label = "media";
        };

        functions {
            bindings = <
&bootloader  &kp F12  &kp F7  &kp F8             &kp F9     &kp PRINTSCREEN    &none  &none      &none           &none     &none     &bootloader
&trans       &kp F11  &kp F4  &kp F5             &kp F6     &kp SCROLLLOCK     &none  &kp LCTRL  &kp LEFT_SHIFT  &kp LALT  &kp LGUI  &trans
&trans       &kp F10  &kp F1  &kp F2             &kp F3     &kp PAUSE_BREAK    &none  &none      &none           &none     &none     &trans
                              &kp K_APPLICATION  &kp SPACE  &kp TAB            &none  &none      &none
            >;

            label = "funs";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        numbers {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
